{"use_tot_realgdp_2022.csv":"State,Full Names, Total Energy Consumption (BTU) , Real GDP , Energy Consumption per real GDP ,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n AK ,Alaska,\" 724,059 \",\" 50,315.1 \",14.39,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n AL ,Alabama,\" 1,902,374 \",\" 235,807.3 \",8.07,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n AR ,Arkansas,\" 1,052,517 \",\" 137,355.5 \",7.66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n AZ ,Arizona,\" 1,526,882 \",\" 403,474.2 \",3.78,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n CA ,California,\" 6,882,442 \",\" 3,167,460.8 \",2.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n CO ,Colorado,\" 1,464,010 \",\" 416,114.4 \",3.52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n CT ,Connecticut,\" 707,635 \",\" 276,668.8 \",2.56,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n DC ,District of Columbia,\" 141,046 \",\" 144,029.6 \",0.98,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n DE ,Delaware,\" 274,796 \",\" 75,172.6 \",3.66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n FL ,Florida,\" 4,324,987 \",\" 1,218,430.2 \",3.55,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n GA ,Georgia,\" 2,836,228 \",\" 655,827.3 \",4.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n HI ,Hawaii,\" 270,345 \",\" 85,211.4 \",3.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n IA ,Iowa,\" 1,423,243 \",\" 197,846.3 \",7.19,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n ID ,Idaho,\" 518,988 \",\" 91,683.7 \",5.66,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n IL ,Illinois,\" 3,675,647 \",\" 864,170.9 \",4.25,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n IN ,Indiana,\" 2,618,930 \",\" 396,009.2 \",6.61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n KS ,Kansas,\" 1,000,720 \",\" 174,794.6 \",5.73,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n KY ,Kentucky,\" 1,673,214 \",\" 217,568.1 \",7.69,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n LA ,Louisiana,\" 4,245,986 \",\" 231,262.3 \",18.36,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MA ,Massachusetts,\" 1,315,196 \",\" 604,357.7 \",2.18,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MD ,Maryland,\" 1,202,811 \",\" 412,282.6 \",2.92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n ME ,Maine,\" 335,330 \",\" 72,413.5 \",4.63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MI ,Michigan,\" 2,706,841 \",\" 539,898.2 \",5.01,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MN ,Minnesota,\" 1,759,947 \",\" 379,111.5 \",4.64,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MO ,Missouri,\" 1,733,435 \",\" 336,625.8 \",5.15,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MS ,Mississippi,\" 1,099,776 \",\" 114,152.9 \",9.63,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n MT ,Montana,\" 395,289 \",\" 53,983.4 \",7.32,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NC ,North Carolina,\" 2,568,782 \",\" 609,058.2 \",4.22,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n ND ,North Dakota,\" 670,608 \",\" 54,798.7 \",12.24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NE ,Nebraska,\" 846,389 \",\" 137,078.1 \",6.17,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NH ,New Hampshire,\" 297,228 \",\" 90,150.5 \",3.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NJ ,New Jersey,\" 2,014,378 \",\" 646,731.3 \",3.11,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NM ,New Mexico,\" 687,574 \",\" 101,315.0 \",6.79,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NV ,Nevada,\" 706,115 \",\" 187,226.2 \",3.77,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n NY ,New York,\" 3,452,677 \",\" 1,763,524.6 \",1.96,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n OH ,Ohio,\" 3,503,212 \",\" 689,681.3 \",5.08,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n OK ,Oklahoma,\" 1,526,435 \",\" 191,583.0 \",7.97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n OR ,Oregon,\" 857,253 \",\" 254,708.4 \",3.37,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n PA ,Pennsylvania,\" 3,736,887 \",\" 772,335.9 \",4.84,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n RI ,Rhode Island,\" 186,650 \",\" 62,190.9 \",3.00,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n SC ,South Carolina,\" 1,623,415 \",\" 250,873.4 \",6.47,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n SD ,South Dakota,\" 358,362 \",\" 54,959.3 \",6.52,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n TN ,Tennessee,\" 2,101,812 \",\" 412,101.3 \",5.10,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n TX ,Texas,\" 13,780,584 \",\" 1,924,007.5 \",7.16,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n UT ,Utah,\" 848,682 \",\" 213,898.3 \",3.97,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n VA ,Virginia,\" 2,427,849 \",\" 576,964.3 \",4.21,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n VT ,Vermont,\" 124,779 \",\" 34,609.4 \",3.61,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n WA ,Washinton,\" 1,571,449 \",\" 641,143.6 \",2.45,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n WI ,Wisconsin,\" 1,768,616 \",\" 335,688.5 \",5.27,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n WV ,West Virginia,\" 835,489 \",\" 76,525.5 \",10.92,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n WY ,Wyoming,\" 496,162 \",\" 37,294.2 \",13.30,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\n,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,","test.py":"import sketchingpy\n\nsketch = sketchingpy.Sketch2D(500, 500)\n\n# sets background to white as default\nsketch.clear(\"#ffffff\")\nsketch.set_ellipse_mode(\"radius\")\n\ndef draw_circles(y):\n    sketch.set_stroke(\"#000000\")\n\n    sketch.set_fill(\"#edf8fb\")\n    sketch.draw_ellipse(150, y, 20, 20)\n\n    sketch.set_fill(\"#b2e2e2\")\n    sketch.draw_ellipse(200, y, 20, 20)\n\n    sketch.set_fill(\"#66c2a4\")\n    sketch.draw_ellipse(250, y, 20, 20)\n\n    sketch.set_fill(\"#2ca25f\")\n    sketch.draw_ellipse(300, y, 20, 20)\n\n    sketch.set_fill(\"#006d2c\")\n    sketch.draw_ellipse(350, y, 20, 20)\n\ndraw_circles(125)\n\nsketch.set_rect_mode(\"corner\")\nsketch.clear_stroke()\nsketch.set_fill(\"#555555\")\nsketch.draw_rect(0, 250, 500, 250)\n\ndraw_circles(375)\n\nsketch.show()","sector_prices_2022.csv":"Sector,2022\r\nResidential,41.78\r\nCommercial,43.19\r\nIndustrial,23.13\r\nTransportation,39.27","sector_2022.csv":"Sector,2022,,,,,,,\r\nResidential,\"1,203,738\",,,,,,,\r\nCommercial,\"1,193,066\",,,,,,,\r\nIndustrial,\"1,539,259\",,,,,,,\r\nTransportation,\"2,915,818\",,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,\r\n,,,,,,,,","renewable_2022.csv":"Type,2022\r\nBiomass,\"498,637\"\r\nGeothermal,\"40,288\"\r\nHydropower,\"60,202\"\r\nSolar Energy,\"232,908\"\r\nWind Energy,\"49,945\"\r\n,","fossil_fuel.csv":"Type,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nNatural Gas,82.0,84.9,86.9,91.9,100.1,97.6,105.1,106.8,112.8,111.1,112.0,111.3,111.9,103.2,91.5,89.9,84.3,83.4,72.1,81.7,79.4,80.2,71.1,63.1,67.3,72.8,58.7,71.7,65.4,70.1,70.1,72.5,74.1,70.8,74.2,66.6,63.0,67.3,73.3,71.0,72.3,72.9,66.5,65.7,69.2,64.3,66.0,68.1,67.5,64.7,62.3,58.4,64.7,64.9,62.4,61.3,57.4,55.7,56.0,56.3,54.5,55.5,54.6,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,\r\nPetroleum,115.7,114.7,110.1,108.4,111.7,112.4,117.7,117.4,123.9,124.7,125.1,130.5,132.8,146.1,135.7,138.2,147.9,161.6,160.0,160.6,146.1,132.2,115.8,117.5,124.3,118.2,117.6,119.5,123.5,122.1,117.0,106.8,104.8,101.0,105.1,104.8,105.8,101.6,100.7,102.3,105.2,104.2,106.5,101.3,105.2,106.6,107.3,107.0,99.4,94.5,90.5,87.9,84.5,84.6,83.6,86.0,88.6,90.2,90.4,90.0,71.3,83.6,86.7,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,","Final.py":"import sketchingpy\nimport random\nimport math\n\nWIDTH = 1600\nHEIGHT = 900\n\nTITLE = \"California Energy Data (2022)\"\n\nSECTOR_COLORS = {\n    \"Residential\": \"#99a85c\", # Green\n    \"Commercial\": \"#cac1d9\",  # Light Purple\n    \"Industrial\": \"#f2d584\",  # Yellow\n    \"Transportation\": \"#597da5\",  # Blue\n}\n\n# Darker shades of corresponding sector colors\nCAPITA_COLORS = {\n    \"Residential\": \"#6b7540\", # Green\n    \"Commercial\": \"#a19aad\",  # Light Purple\n    \"Industrial\": \"#c1aa69\",  # Yellow\n    \"Transportation\": \"#3e5773\",  # Blue\n}\n\n\nsketch = sketchingpy.Sketch2DWeb(WIDTH, HEIGHT)\nsketch.clear('#FFFFFF')\n\n\nclass LoadData:\n    \"\"\"Class for loading and managing data from CSV files.\"\"\"\n    def __init__(self, canvas):\n        self.canvas = canvas\n        self.data = {}\n\n    def load_ranked_data(self, filepath):\n        \"\"\"Load data from the use_tot_realgdp_2022 CSV file and return a dictionary.\"\"\"\n        csv_data = sketch.get_data_layer().get_csv(filepath)\n        \n        data = {}\n        for row in csv_data[0:]:\n            \n            try:\n                state = row[\"Full Names\"].strip() \n                total_energy = row[\" Total Energy Consumption (BTU) \"].replace(',', '').strip()\n                real_gdp = row[\" Real GDP \"].replace(',', '').strip()\n                energy_per_gdp = row[\" Energy Consumption per real GDP \"].strip()\n\n                total_energy = float(total_energy) if total_energy else 0\n                real_gdp = float(real_gdp) if real_gdp else 0\n                energy_per_gdp = float(energy_per_gdp) if energy_per_gdp else 0\n\n                data[state] = {\n                    \"Total Energy Consumption (BTU)\": total_energy,\n                    \"Real GDP\": real_gdp,\n                    \"Energy Consumption per Real GDP\": energy_per_gdp\n                }\n            except ValueError as e:\n                print(f\"Skipping row due to error: {e}\")\n                continue  \n\n        return data\n    \n    def load_sector_data(self, filepath):\n        \"\"\"Load sector data from the sector_2022 CSV file and return a dictionary.\"\"\"\n        csv_data = sketch.get_data_layer().get_csv(filepath)\n        \n        data = {}\n        for row in csv_data[0:]:  \n            try:\n                sector = row[\"Sector\"].strip()  \n                value = row[\"2022\"].replace(',', '').strip()\n\n                value = float(value) if value else 0\n                data[sector] = value\n\n            except ValueError as e:\n                print(f\"Skipping row due to error: {e}\")\n                continue\n            except KeyError as e:\n                print(f\"Missing column in the CSV file: {e}\")\n                continue\n\n        return data\n    \n    def load_renewable_data(self, filepath):\n        \"\"\"Load renewable energy data from the renewable_2022 CSV file and return a dictionary.\"\"\"\n        csv_data = sketch.get_data_layer().get_csv(filepath)\n        \n        data = {}\n        for row in csv_data[0:5]:\n            try:\n                sector = row[\"Type\"].strip()  \n                value = row[\"2022\"].replace(',', '').strip()\n\n                value = float(value) if value else 0\n                data[sector] = value\n\n            except ValueError as e:\n                print(f\"Skipping row due to error: {e}\")\n                continue\n            except KeyError as e:\n                print(f\"Missing column in the CSV file: {e}\")\n                continue\n\n        return data\n    \n    def load_ff_data(self, filepath):\n        \"\"\"Load fossil fuel data from the fossil_fuel CSV file and return a dictionary.\"\"\"\n        csv_data = sketch.get_data_layer().get_csv(filepath)\n        \n        data = {\"Years\": [], \"Natural Gas\": [], \"Petroleum\": []}\n        for row in csv_data:\n            try:\n                if row[\"Type\"].strip() == \"Natural Gas\":\n                    data[\"Natural Gas\"] = [float(row[year].replace(',', '').strip()) for year in row if year.isdigit()]\n                elif row[\"Type\"].strip() == \"Petroleum\":\n                    data[\"Petroleum\"] = [float(row[year].replace(',', '').strip()) for year in row if year.isdigit()]\n\n            except ValueError as e:\n                print(f\"Skipping row due to error: {e}\")\n                continue\n\n            except KeyError as e:\n                print(f\"Missing column in the CSV file: {e}\")\n                continue\n\n        # Extract years from the first row\n        data[\"Years\"] = [int(year) for year in csv_data[0] if year.isdigit()]\n        return data\n    \n    def get_data(self):\n        \"\"\"Return the loaded data.\"\"\"\n        return self.data\n\n\nclass Axis:\n    \"\"\"A general class for drawing x and y axes.\"\"\"\n\n    def __init__(self, canvas, width, height):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n\n    def draw_x_axis(self, x_start, x_end, y_base):\n        \"\"\"Draw the x-axis with optional tick marks and labels.\"\"\"\n        self.canvas.set_stroke('#000000')\n        self.canvas.set_stroke_weight(2)\n        self.canvas.draw_line(x_start, y_base, x_end, y_base)\n\n    def draw_x_axis_title(self, x, y, title):\n        \"\"\"Draw the x-axis title.\"\"\"\n        self.canvas.set_fill('#000000')\n        self.canvas.set_stroke_weight(0)\n        self.canvas.set_text_align('center', 'center')\n        self.canvas.set_text_font('Arial', 18)\n        self.canvas.draw_text(x, y, title)\n\n    def draw_y_axis(self, y_start, y_end, x_base):\n        \"\"\"Draw the y-axis with optional tick marks and labels.\"\"\"\n        self.canvas.set_stroke('#000000')\n        self.canvas.set_stroke_weight(2)\n        self.canvas.draw_line(x_base, y_start, x_base, y_end)\n\n    def draw_y_axis_title(self, x, y, title):\n        \"\"\"Draw the y-axis title.\"\"\"\n        self.canvas.set_fill('#000000')\n        self.canvas.set_stroke_weight(0)\n        self.canvas.set_text_align('right', 'center')\n        self.canvas.set_text_font('Arial', 16)\n        self.canvas.draw_text(x, y, title)\n    \n    def draw_y_title_rotate(self, x, y, title):\n        \"\"\"Draw the y-axis title with rotation.\"\"\"\n        self.canvas.push_transform() \n        self.canvas.translate(x, y)  \n        self.canvas.rotate(-90)  \n        self.canvas.set_fill('#000000')\n        self.canvas.set_stroke_weight(0)\n        self.canvas.set_text_align('center', 'center') \n        self.canvas.set_text_font('Arial', 16)\n        self.canvas.draw_text(0, 0, title)  \n        self.canvas.pop_transform()  \n       \n\nclass Sector:\n    \"\"\"Creates a bar graph on the upper left side of the plot.\"\"\"\n    def __init__(self, canvas, width, height, data):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n        self.data = data\n\n    def draw(self):\n        categories = [\"Residential\", \"Commercial\", \"Industrial\", \"Transportation\"]\n        values = [self.data[category] for category in categories]\n\n        # Bar graph dimensions\n        bar_width = 50\n        spacing = 40\n        x_start = 95\n        y_base = self.height - 419\n        max_value = max(values)\n        scale_factor = 300 / max_value\n\n        # Draw the bar chart\n        for i, (category, value) in enumerate(zip(categories, values)):\n            x = x_start + i * (bar_width + spacing)\n            bar_height = value * scale_factor  \n            y = y_base - bar_height\n\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_fill(SECTOR_COLORS[category])\n            self.canvas.draw_rect(x, y, bar_width, bar_height)\n\n        # Draw the legend\n        self.canvas.set_stroke_weight(0)\n        self.draw_legend(categories)\n\n        # Draw the y-axis ticks\n        self.draw_y_axis_ticks(y_base, y_base - 300, max_value)\n\n    def draw_legend(self, categories):\n        \"\"\"Draw a horizontal legend at the top left.\"\"\"\n        legend_x_start = 40\n        legend_y_start = 70\n        legend_box_size = 20\n        spacing = 8\n\n        for i, category in enumerate(categories):\n            x = legend_x_start + i * (legend_box_size + spacing + 80)\n            y = legend_y_start\n\n            # Draw the legend color box\n            self.canvas.set_fill(SECTOR_COLORS[category])\n            self.canvas.draw_rect(x, y, legend_box_size, legend_box_size)\n\n            # Draw the legend label\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"left\", \"center\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_font(\"Arial\", 12)\n            self.canvas.draw_text(x + legend_box_size + spacing - 5, y + legend_box_size / 2 + 1, category)\n\n    def draw_y_axis_ticks(self, y_base, y_max, max_value):\n        \"\"\"Draw ticks and labels on the y-axis.\"\"\"\n        tick_spacing_value = 500000\n        num_ticks = int(max_value / tick_spacing_value) + 1\n        tick_spacing = (y_base - y_max) / num_ticks  \n        \n        for i in range(num_ticks + 1):\n            y = y_base - i * tick_spacing\n            value = i * tick_spacing_value\n\n            # Draw the tick mark\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(450, y, 470, y)  \n\n            # Draw the tick label\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"left\", \"center\")\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(485, y, f\"{int(value)}\")  \n\n\nclass PerCapita:\n    \"\"\"Creates a bar graph on the lower left side of the plot.\"\"\"\n    def __init__(self, canvas, width, height, data):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n        self.data = data\n        \n    def draw(self):\n        categories = [\"Residential\", \"Commercial\", \"Industrial\", \"Transportation\"]\n        values = [self.data[category] for category in categories]\n\n        # Bar graph dimensions\n        bar_width = 50\n        spacing = 40\n        x_start = 95\n        y_base = self.height - 419\n        max_value = max(values)\n        scale_factor = 300 / max_value\n\n        # Draw the bars upside down\n        for i, (category, value) in enumerate(zip(categories, values)):\n            x = x_start + i * (bar_width + spacing)\n            bar_height = value * scale_factor \n            y = y_base + bar_height\n\n            # Draw the bar upside down\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_fill(CAPITA_COLORS[category])  # Use the same colors as Sector\n            self.canvas.draw_rect(x, y - bar_height, bar_width, bar_height)  \n        \n        # Draw the y-axis ticks\n        self.draw_y_axis_ticks(y_base, 75, max_value)\n        \n    def draw_y_axis_ticks(self, y_base, y_max, max_value):\n        \"\"\"Draw ticks and labels on the y-axis.\"\"\"\n        tick_spacing_value = 5  # Increment by 5\n        num_ticks = int(max_value / tick_spacing_value) + 1\n        tick_spacing = (y_max - y_base + 100) / max_value * tick_spacing_value  # Pixel spacing for each tick\n\n        for i in range(num_ticks + 1):\n            y = y_base - i * tick_spacing\n            value = i * tick_spacing_value\n\n            # Draw the tick mark\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(450, y, 470, y)  \n\n            # Draw the tick label\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"left\", \"center\")\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(485, y, f\"{int(value)}\")  \n\n\nclass RankedBar:\n    \"\"\"Creates a bar graph in the middle that ranks the states based on their total energy consumption.\"\"\"\n    def __init__(self, canvas, width, height, data):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n        self.data = data\n        self.criteria = \"Total Energy Consumption (BTU)\"  # Default criteria\n\n    def set_criteria(self, criteria):\n        \"\"\"Set the criteria for ranking the states based on user selection.\"\"\"\n        self.criteria = criteria   \n\n        # Clear and redraw ranked chart\n        x_base = 1150\n        y_start = 115\n        bar_area_width = 400\n        bar_area_height = self.height \n        self.canvas.set_fill('#FFFFFF')\n        self.canvas.draw_rect(x_base - 10, y_start - 10, bar_area_width, bar_area_height)\n        self.draw() \n\n        # Redraw the x and y axes\n        bar_axis = Axis(self.canvas, self.width, self.height)\n        bar_axis.draw_x_axis(1150, 1500, self.height - 75)  \n        bar_axis.draw_y_axis(132, self.height - 75, 1150)  \n        stacked_axis.draw_x_axis_title(1325, 870, \"Consumption Estimates (billion BTU)\")\n\n    def draw(self):\n        # Sort states by the selected criteria\n        sorted_states = sorted(self.data.items(), key=lambda x: x[1][self.criteria], reverse=True)\n        max_value = max([values[self.criteria] for _, values in sorted_states])\n        scale_factor = 315 / max_value\n\n        # Bar graph dimensions\n        bar_height = 6\n        spacing = 7.25\n        x_base = 1150\n        y_start = 132\n        y_end = self.height - 50\n\n        # Draw the bars\n        for i, (state, values) in enumerate(sorted_states):\n            y = y_start + i * (bar_height + spacing)\n            x = x_base \n            value = values[self.criteria] * scale_factor\n\n            # Make California stand out compared to other states\n            if state == \"California\" or state == \"CA\":\n                self.canvas.set_fill(\"#fa0b0b\")  # Red for California\n            else:\n                self.canvas.set_fill(\"#d0d0d0\")  # Gray for other states\n\n            # Draw the bar\n            self.canvas.set_stroke(\"#000000\")  \n            self.canvas.set_stroke_weight(0)\n            self.canvas.draw_rect(x, y + 10, value, bar_height)\n\n             # Draw the state label to the right of the bar\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"left\", \"center\")  # Align text to the left\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(x + value + 10, y + bar_height / 2 + 10, state)  \n    \n        self.draw_x_axis_counts(x_base, y_end, bar_height, spacing, max_value, scale_factor)\n\n    # Draw the x-axis labels\n    def draw_x_axis_counts(self, x_base, y_end, bar_height, spacing, max_value, scale_factor):\n        \"\"\"Draw counts on the x-axis for the RankedBar graph.\"\"\"\n        # Draw the ticks and labels\n        num_ticks = 4  \n        tick_spacing = 315 / num_ticks  \n        tick_spacing_value = max_value / num_ticks\n\n        for i in range(num_ticks + 1):\n            x = x_base + i * tick_spacing\n            value = i * tick_spacing_value\n\n            # Draw the tick\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(x, y_end - 30, x, y_end - 20)\n\n            # Draw the tick label\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"center\", \"top\")\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(x, y_end - 15, f\"{value:,.2f}\" if isinstance(value, float) else f\"{int(value):,}\")\n\n        # Draw the x-axis label\n        self.canvas.set_stroke_weight(0)\n        self.canvas.set_fill(\"#000000\")\n        self.canvas.set_text_align(\"center\", \"bottom\")\n        self.canvas.set_text_font(\"Arial\", 12)\n\n\nclass RadarChart:\n    \"\"\"Creates a radar chart for visualizing the renewable energy consumption.\"\"\"\n    def __init__(self, canvas, width, height, data):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n        self.data = data\n\n    def draw(self):\n        renewables = list(self.data.keys())\n        values = list(self.data.values())\n        max_value = max(values)\n        \n        # Radar chart dimensions\n        center_x = self.width / 2 + 10\n        center_y = 350\n        radius = 180\n        axis_extension = 10\n\n        # Pentagon grid\n        num_vertices = 5  \n        increment =  125000\n        num_levels = int(max_value / increment) + 1\n        \n        for level in range(1, num_levels + 1):\n            r = (level / num_levels) * radius\n            points = []\n            for i in range(num_vertices):\n                angle = (2 * math.pi / num_vertices) * i - math.pi / 2  # Start at the top\n                x = center_x + r * math.cos(angle)\n                y = center_y + r * math.sin(angle)\n                points.append((x, y))\n            # Connect the vertices\n            self.canvas.set_stroke(\"#cccccc\")  # Light gray for the grid\n            self.canvas.set_stroke_weight(2)\n            for j in range(len(points)):\n                x1, y1 = points[j]\n                x2, y2 = points[(j + 1) % len(points)]  # Wrap around to the first point\n                self.canvas.draw_line(x1, y1, x2, y2)\n        \n            # Add number labels for each layer\n            layer_value = level * increment\n            label_x = center_x + 20\n            label_y = center_y - r - 5  # Position the label next to the vertical axis\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"center\", \"center\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(label_x, label_y, f\"{int(layer_value)}\")\n\n\n        # Draw the radar axes\n        num_renewables = len(renewables)\n        for i in range(num_renewables):\n            angle = (2 * math.pi / num_renewables) * i - math.pi / 2  \n            x = center_x + (radius + axis_extension) * math.cos(angle)\n            y = center_y + (radius + axis_extension) * math.sin(angle)\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(center_x, center_y, x, y)\n\n            # Add category labels\n            label_x = center_x + (radius + 40) * math.cos(angle)\n            label_y = center_y + (radius + 40) * math.sin(angle)\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_text_align(\"center\", \"center\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_font(\"Arial\", 14)\n            self.canvas.draw_text(label_x, label_y, renewables[i])\n\n        # Plot the data points\n        points = []\n        for i, value in enumerate(values):\n            angle = (2 * math.pi / num_renewables) * i - math.pi / 2\n            r = (value / max_value) * radius\n            x = center_x + r * math.cos(angle)\n            y = center_y + r * math.sin(angle)\n            points.append((x, y))\n\n        # Connect the points to form the radar shape\n        self.canvas.set_stroke(\"#0ec30e\")  # Green\n        self.canvas.set_stroke_weight(2)\n        for i in range(len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[(i + 1) % len(points)] \n            self.canvas.draw_line(x1, y1, x2, y2)\n\n        # Draw the data points\n        for x, y in points:\n            self.canvas.set_fill(\"#0ec30e\")\n            self.canvas.draw_ellipse(x, y, 3, 3) \n\n\nclass LineGraph:\n    \"\"\"Creates a line graph for visualizing the petroleum and natural gas consumption over the years.\"\"\"\n    def __init__(self, canvas, width, height, data):\n        self.canvas = canvas\n        self.width = width\n        self.height = height\n        self.data = data\n\n    def draw(self):\n        years = self.data[\"Years\"]\n        natural_gas = self.data[\"Natural Gas\"]\n        petroleum = self.data[\"Petroleum\"]\n        max_value = max(max(natural_gas), max(petroleum))\n\n        # Line graph dimensions\n        graph_x_start = 605\n        graph_x_end = 1050\n        graph_y_start = 800\n        graph_y_end = 500\n\n        # Scale the data to fit within the graph dimensions\n        x_spacing = (graph_x_end - graph_x_start) / (len(years) - 1)\n        y_scale = (graph_y_start - graph_y_end) / max_value * 0.7\n\n        # Plot the data points and connect them with lines\n        points_ng = []\n        for i, value in enumerate(natural_gas):\n            x = graph_x_start + i * x_spacing\n            y = graph_y_start - value * y_scale\n            points_ng.append((x, y))\n\n            # Draw the data point\n            self.canvas.set_fill(\"#e87e2b\") # Orange\n            self.canvas.draw_ellipse(x, y, 1, 1)  \n\n        # Connect the points with lines\n        self.canvas.set_stroke(\"#e87e2b\")\n        self.canvas.set_stroke_weight(2)\n        for i in range(len(points_ng) - 1):\n            x1, y1 = points_ng[i]\n            x2, y2 = points_ng[i + 1]\n            self.canvas.draw_line(x1, y1, x2, y2)\n        \n        # Draw the data points\n        for x, y in points_ng:\n            self.canvas.set_fill(\"#e87e2b\")\n            self.canvas.draw_ellipse(x, y, 1, 1) \n\n        # Plot the data points and connect them with lines\n        points_p = []\n        for i, value in enumerate(petroleum):\n            x = graph_x_start + i * x_spacing\n            y = graph_y_start - value * y_scale\n            points_p.append((x, y))\n\n            # Draw the data point\n            self.canvas.set_fill(\"#a649a6\") # Orange\n            self.canvas.draw_ellipse(x, y, 1, 1)  \n\n        # Connect the points with lines\n        self.canvas.set_stroke(\"#a649a6\")\n        self.canvas.set_stroke_weight(2)\n        for i in range(len(points_p) - 1):\n            x1, y1 = points_p[i]\n            x2, y2 = points_p[i + 1]\n            self.canvas.draw_line(x1, y1, x2, y2)\n        \n        # Draw the data points\n        for x, y in points_p:\n            self.canvas.set_fill(\"#a649a6\")\n            self.canvas.draw_ellipse(x, y, 1, 1) \n        \n        # Draw x-axis ticks for every 20 years\n        start_year = years[0]\n        end_year = years[-1]\n        for year in range(start_year, end_year + 1, 10):\n            index = years.index(year)  \n            x = graph_x_start + index * x_spacing\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(x, graph_y_start + 20, x, graph_y_start + 30)  \n\n            # Draw the year label\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_align(\"center\", \"top\")\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(x, graph_y_start + 35, str(year))\n\n        # Draw y-axis labels\n        tick_spacing_value = 20\n        max_value = ((max_value // tick_spacing_value) + 1) * tick_spacing_value  \n        num_ticks = int(max_value / tick_spacing_value) \n        tick_spacing = (graph_y_start - graph_y_end - 15) / num_ticks\n\n        for i in range(num_ticks):\n            y = graph_y_start + 25 - i * tick_spacing\n            value = i * tick_spacing_value\n\n            # Draw the tick mark\n            self.canvas.set_stroke(\"#000000\")\n            self.canvas.set_stroke_weight(2)\n            self.canvas.draw_line(graph_x_start - 10, y, graph_x_start, y)  # Tick mark\n\n            # Draw the value label\n            self.canvas.set_fill(\"#000000\")\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_align(\"right\", \"center\")\n            self.canvas.set_text_font(\"Arial\", 10)\n            self.canvas.draw_text(graph_x_start - 15, y, f\"{int(value)}\")\n    \n\nclass DropdownRank:\n    \"\"\"Creates a dropdown menu for selecting ranking criteria.\"\"\"\n    def __init__(self, canvas, x, y, width, height, options, callback):\n        self.canvas = canvas\n        self.x = x\n        self.y = y\n        self.width = width\n        self.height = height\n        self.options = options  \n        self.callback = callback  \n        self.selected_option = options[0]  # Default to the first option\n        self.is_expanded = False  # Track if the dropdown is expanded\n\n    def draw(self):\n        \"\"\"Draws the dropdown box and the selected option.\"\"\"\n        # Draw the dropdown box\n        self.canvas.set_stroke('#000000')\n        self.canvas.set_stroke_weight(2)\n        self.canvas.set_fill('#FFFFFF')\n        self.canvas.draw_rect(self.x, self.y, self.width, self.height)\n\n        # Draw the selected option\n        self.canvas.set_fill('#000000')\n        self.canvas.set_stroke_weight(0)\n        self.canvas.set_text_align('center', 'center')\n        self.canvas.set_text_font('Arial', 12)\n        self.canvas.draw_text(self.x + self.width / 2, self.y + self.height / 2, self.selected_option)\n\n        # If expanded, draw the dropdown options\n        if self.is_expanded:\n            for i, option in enumerate(self.options):\n                option_y = self.y + (i + 1) * self.height\n                self.canvas.set_stroke('#000000')\n                self.canvas.set_stroke_weight(2)\n                self.canvas.set_fill('#FFFFFF')\n                self.canvas.draw_rect(self.x, option_y, self.width, self.height)\n\n                # Draw the option text\n                self.canvas.set_fill('#000000')\n                self.canvas.set_stroke_weight(0)\n                self.canvas.set_text_align('center', 'center')\n                self.canvas.set_text_font('Arial', 12)\n                self.canvas.draw_text(self.x + self.width / 2, option_y + self.height / 2, option)\n        \n        elif self.is_expanded == False:\n            self.canvas.set_fill('#000000')\n            self.canvas.set_stroke_weight(0)\n            self.canvas.set_text_align('center', 'center')\n            self.canvas.set_text_font('Arial', 12)\n            self.canvas.draw_text(self.x + self.width / 2, self.y + self.height / 2, self.selected_option)\n\n    def on_click(self, x, y):\n        \"\"\"Handle mouse click events.\"\"\"\n        # Check if the click is within the dropdown box\n        if self.x <= x <= self.x + self.width and self.y <= y <= self.y + self.height:\n            # Toggle the dropdown expansion\n            self.is_expanded = not self.is_expanded\n        elif self.is_expanded:\n            # Check if an option is clicked\n            for i, option in enumerate(self.options):\n                option_y = self.y + (i + 1) * self.height\n                if self.x <= x <= self.x + self.width and option_y <= y <= option_y + self.height:\n                    # Update the selected option and collapse the dropdown\n                    self.selected_option = option\n                    self.is_expanded = False\n                    self.callback(self.selected_option) \n                    break\n        else:\n            # Collapse the dropdown if clicked outside\n            self.is_expanded = False\n\n\ndef draw_title(title):\n    \"\"\"Draw the title for the bar graph.\"\"\"\n    sketch.set_text_font('Arial', 36)\n    sketch.set_text_align('center', 'bottom')\n    sketch.set_fill('#000000')\n    sketch.draw_text(WIDTH/2, 60, title)\n\ndef draw_explanation(x, y, title):\n    \"\"\"Draw any explanations needed for the visualization\"\"\"\n    sketch.set_text_font('Arial', 12)\n    sketch.set_text_align('right', 'center')\n    sketch.set_fill('#000000')\n    sketch.set_stroke_weight(0)\n    sketch.draw_text(x, y, title)\n\n# Load the data\nload_data = LoadData(sketch)\n\nUSE_TOT_REALGDP_2022 = load_data.load_ranked_data('./use_tot_realgdp_2022.csv')\nSECTOR_T0T_2022 = load_data.load_sector_data('./sector_2022.csv')\nSECTOR_PRICES_2022 = load_data.load_sector_data('./sector_prices_2022.csv')\nRENEWABLE_2022 = load_data.load_renewable_data('./renewable_2022.csv')\nFOSSIL_FUEL = load_data.load_ff_data('./fossil_fuel.csv')\n\n# Draw the title\ndraw_title(TITLE)\n\n# Draw the explanation\nBTU_EXPLANATION = \"BTU: British Thermal Unit\"\ndraw_explanation(477, 870, BTU_EXPLANATION)\n\n# Draw the graphs\nsector = Sector(sketch, WIDTH, HEIGHT, SECTOR_T0T_2022)\nsector.draw()\n\nperCapita = PerCapita(sketch, WIDTH, HEIGHT, SECTOR_PRICES_2022)\nperCapita.draw()\n\nrankedBar = RankedBar(sketch, WIDTH, HEIGHT, USE_TOT_REALGDP_2022)\nrankedBar.draw()\n\nradar = RadarChart(sketch, WIDTH, HEIGHT, RENEWABLE_2022)\nradar.draw()\n\nlineGraph = LineGraph(sketch, WIDTH, HEIGHT, FOSSIL_FUEL)\nlineGraph.draw()\n\n# Create the dropdown\ndropdown = DropdownRank(sketch, 1225, 85, 200, 20, [\n    'Total Energy Consumption (BTU)',\n    'Real GDP',\n    'Energy Consumption per Real GDP'\n], rankedBar.set_criteria)\n\ndropdown.draw()\n\n# Handle mouse button presses\ndef on_click(button):\n    \"\"\"Handle mouse button presses.\"\"\"\n    mouse = sketch.get_mouse()\n    x, y = mouse.get_pointer_x(), mouse.get_pointer_y()\n    dropdown.on_click(x, y)  \n    dropdown.draw()\n\n# Set up the sketch to handle mouse button presses\nsketch.get_mouse().on_button_press(on_click)\n\n# Draw the axes\nbar_axis = Axis(sketch, WIDTH, HEIGHT)\nbar_axis.draw_x_axis(60, 460, HEIGHT - 419)\nbar_axis.draw_y_axis(137, HEIGHT - 75, 460)\nbar_axis.draw_y_axis_title(475, 120, \"Energy Consumption (billion BTU)\")\nbar_axis.draw_y_axis_title(475, 840, \"Average Energy Prices ($/million BTU)\")\n\nradar_axis = Axis(sketch, WIDTH, HEIGHT)\nradar_axis.draw_x_axis_title(800, 95, \"Renewable Energy Consumption (billion BTU)\")\n\nline_axis = Axis(sketch, WIDTH, HEIGHT)\nline_axis.draw_x_axis(600, 1070, HEIGHT - 75)\nline_axis.draw_x_axis_title(800, 870, \"Years\")\nline_axis.draw_y_axis(550, HEIGHT - 75, 600)\nline_axis.draw_y_title_rotate(550, 690, \"Consumption Per Capita (million BTU)\")\n\nstacked_axis = Axis(sketch, WIDTH, HEIGHT)\nstacked_axis.draw_x_axis(1150, 1500, HEIGHT - 75)\nstacked_axis.draw_x_axis_title(1325, 870, \"Consumption Estimates (billion BTU)\")\nstacked_axis.draw_y_axis(137, HEIGHT - 75, 1150)\nstacked_axis.draw_y_title_rotate(1120, 481, \"States\")\n\n# Show the sketch\nsketch.show()\n"}
{"SkillsLabs1Ball.py":"import sketchingpy\nimport time\n\nWIDTH = 500  # pixels\nHEIGHT = 400  # pixels\n\nsketch = sketchingpy.Sketch2D(WIDTH, HEIGHT)\n\nclass Ball:\n    \n    def __init__(self, position_x, position_y, velocity_x, velocity_y):\n        self.position_x = position_x\n        self.position_y = position_y\n        self.velocity_x = velocity_x\n        self.velocity_y = velocity_y\n    \n    # bouncing behavior\n    def reverse_x(self):\n        self.velocity_x = self.velocity_x * -1\n        \n    def reverse_y(self):\n        self.velocity_y = self.velocity_y * -1\n    \n    def get_is_near_mouse(self, mouse_x, mouse_y):\n        x_near = abs(mouse_x - self.position_x) < 10\n        y_near = abs(mouse_y - self.position_y) < 10\n        return x_near and y_near\n\n    def get_hit_mouse_in_direction(self, coordinate, mouse, velocity):\n        if mouse > coordinate and velocity > 0:\n            distance = mouse - coordinate\n            return distance < 10\n        elif mouse < coordinate and velocity < 0:\n            distance = mouse - coordinate\n            return distance > -10\n        else:\n            return False\n        \n    # update ball\n    def update(self, duration, mouse_x, mouse_y):\n        self.position_x = self.position_x + self.velocity_x * duration\n        self.position_y = self.position_y + self.velocity_y * duration\n\n        if self.position_x > WIDTH:\n            self.position_x = WIDTH\n            self.reverse_x()       \n        elif self.position_x < 0:\n            self.position_x = 0\n            self.reverse_x()\n        \n        if self.position_y > HEIGHT:\n            self.position_y = HEIGHT\n            self.reverse_y()\n        elif self.position_y < 0:\n            self.position_y = 0\n            self.reverse_y()\n            \n        if self.get_is_near_mouse(mouse_x, mouse_y):\n            if self.get_hit_mouse_in_direction(self.position_x, mouse_x, self.velocity_x):\n                self.reverse_x()\n            elif self.get_hit_mouse_in_direction(self.position_y, mouse_y, self.velocity_y):\n                self.reverse_y()\n            \nclass Simulation:\n    \n    def __init__(self):\n        self.balls = [\n            Ball(WIDTH / 2, HEIGHT / 2, -10, -10),\n            Ball(WIDTH / 2, HEIGHT / 2, -10, -10),\n            Ball(WIDTH / 2, HEIGHT / 2, 10, 0)\n        ]\n        self.last_time = time.time()\n        \n    # def update(self):\n    #     new_time = time.time()\n    #     duration = new_time - self.last_time\n    #     self.last_time = new_time\n        \n    #     for ball in self.balls:\n    #         ball.update(duration)\n    \n    # update for mouse\n    def update(self, mouse_x, mouse_y):\n        new_time = time.time()\n        duration = new_time - self.last_time\n        self.last_time = new_time\n\n        for ball in self.balls:\n            ball.update(duration, mouse_x, mouse_y)\n            \nsimulation = Simulation()\n\n# def update_and_draw_balls(self):\n#     simulation.update()\n#     for ball in simulation.balls:\n#         sketch.draw_ellipse(ball.position_x, ball.position_y, 2, 2)\n\n# Mouse interaction\ndef update_and_draw_balls(self):\n    mouse = sketch.get_mouse()\n    mouse_x = mouse.get_pointer_x()\n    mouse_y = mouse.get_pointer_y()\n\n    simulation.update(mouse_x, mouse_y)\n\n    for ball in simulation.balls:\n        sketch.draw_ellipse(ball.position_x, ball.position_y, 2, 2)\n        \nsketch.on_step(update_and_draw_balls)\nsketch.show()\n        ","SkillsLab1Line.py":"import sketchingpy\nimport time\n\n# build space\nsketch = sketchingpy.Sketch2D(500, 400)\n \n# DRAWING LINES\n# sketch.draw_line(500 / 2, 400 / 2, 100, 50)\n\ncenter_x = 500 / 2\ncenter_y = 400 / 2\nend_x = 100\nend_y = 50\nsketch.draw_line(center_x, center_y, end_x, end_y)\n\n# start_time = time.time()\n\n# def draw_moving_line(self):\n#     seconds = time.time() - start_time\n#     pixels_per_second = 5\n#     offset = seconds * pixels_per_second\n#     sketch.draw_line(250, 200, 100, 50 + offset)\n\n# sketch.on_step(draw_moving_line)\n\ndef draw_moving_line(self):\n    mouse = sketch.get_mouse()\n    sketch.draw_line(250, 200, mouse.get_pointer_x(), mouse.get_pointer_y())\n\nsketch.on_step(draw_moving_line)\n\nsketch.show()\n","Assignment8.py":"import sketchingpy\nimport math\nimport random\n\nsketch = sketchingpy.Sketch2D(500, 500)\n\nx_center = 250\ny_center = 250\nx_radius = 150\ny_radius = 150\n\n# draws base of the eye\ndef draw_base(x_center, y_center):\n    sketch.clear(\"#ffffff\")\n    sketch.set_ellipse_mode(\"radius\")\n    sketch.set_fill(\"#7eb7bf\")\n    sketch.draw_ellipse(x_center, y_center, x_radius, y_radius)\n\n# draw eye -> updates to where the cursor is\ndef draw_eye(x_center, y_center):\n    draw_base(x_center, y_center)\n    outer_ring(x_center, y_center)\n    draw_iris_teal(x_center, y_center)\n    draw_iris_darkteal(x_center, y_center)\n    draw_iris_lightteal(x_center, y_center)\n    outer_to_inner(x_center, y_center)   \n    white_ring(x_center, y_center)\n    draw_pupil_fuzz(x_center, y_center)\n    draw_pupil(x_center, y_center)\n    draw_shine(x_center, y_center)\n\n#draw pupil\ndef draw_pupil(x_center, y_center):\n    sketch.set_fill(\"#000000\")\n    sketch.draw_ellipse(x_center, y_center, 40, 40)\n    \n# draw pupil fuzz\ndef draw_pupil_fuzz(x_center, y_center):\n    sketch.set_stroke(\"#000000\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(2000):\n        angle = math.radians(i * (360 / 2000)) \n        outer_length = random.uniform(30, 40)\n        inner_length = 30\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\n# draws outer ring\ndef outer_ring(x_center, y_center):\n    sketch.set_stroke('#125359')\n    sketch.set_stroke_weight(6)\n    sketch.draw_ellipse(x_center, y_center, x_radius, y_radius)\n\ndef draw_iris_teal(x_center, y_center):\n    sketch.set_stroke(\"#5099a3\")\n    sketch.set_stroke_weight(1)\n\n    for i in range(1000):  \n        angle = math.radians(random.uniform(0, 360)) \n        length = random.uniform(70, x_radius)\n        x_end = x_center + length * math.cos(angle)  \n        y_end = y_center + length * math.sin(angle)  \n        sketch.draw_line(x_center, y_center, x_end, y_end)\n\ndef draw_iris_darkteal(x_center, y_center):\n    sketch.set_stroke(\"#335861\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(500):\n        angle = math.radians(i * (360 / 500)) \n        outer_length = x_radius - random.uniform(40, 80)\n        inner_length = x_radius - random.uniform(40, 80)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef draw_iris_lightteal(x_center, y_center):\n    sketch.set_stroke(\"#8eb7d7\")\n    sketch.set_stroke_weight(1)\n    outer_length = x_radius - 125\n    \n    for i in range(360):\n        angle = math.radians(i * (360 / 360))\n        inner_length = x_radius - random.uniform(70, 90)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n        \ndef outer_to_inner(x_center, y_center):\n    sketch.set_stroke(\"#125359\")\n    sketch.set_stroke_weight(1)\n    outer_length = x_radius \n\n    for i in range(1000):\n        angle = math.radians(i * (360 / 1000)) \n        inner_length = random.uniform(130, 140)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef white_ring(x_center, y_center):\n    sketch.set_stroke(\"#ffffff\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(200):\n        angle = math.radians(i * (360 / 200)) \n        outer_length = x_radius - random.uniform(30, 40)\n        inner_length = x_radius - random.uniform(30, 40)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef draw_shine(x_center, y_center):\n    sketch.set_fill(\"#ffffff\") \n    shine_x = x_center - 90  \n    shine_y = y_center - 40  \n    shine_width = 30  \n    shine_height = 15 \n    sketch.draw_ellipse(shine_x, shine_y, shine_width, shine_height)\n\ndef update(sketch):\n    sketch.clear(\"#ffffff\")\n    global x_center, y_center\n    mouse = sketch.get_mouse()\n    x_center = mouse.get_pointer_x()\n    y_center = mouse.get_pointer_y()\n    draw_eye(x_center, y_center)\n\nsketch.on_step(update)\ndraw_eye(x_center, y_center)\nsketch.show()\n","Assignment7.py":"import sketchingpy\nimport math\nimport random\n\nsketch = sketchingpy.Sketch2D(500, 500)\nsketch.clear(\"#ffffff\")\n\n# draws base of the eye\nsketch.set_ellipse_mode(\"radius\")\nx_center = 250\ny_center = 250\nx_radius = 150\ny_radius = 150\nsketch.set_fill(\"#7eb7bf\")\nsketch.draw_ellipse(x_center, y_center, x_radius, y_radius)\n\n# draw pupil\ndef draw_pupil():\n    sketch.set_fill(\"#000000\")\n    sketch.draw_ellipse(x_center, y_center, 40, 40)\n    \n# draw pupil fuzz\ndef draw_pupil_fuzz():\n    sketch.set_stroke(\"#000000\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(2000):\n        angle = math.radians(i * (360 / 2000)) \n        outer_length = random.uniform(30, 40)\n        inner_length = 30\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\n# draws outer ring\ndef outer_ring():\n    sketch.set_stroke('#125359')\n    sketch.set_stroke_weight(6)\n    sketch.draw_ellipse(x_center, y_center, x_radius, y_radius)\n\ndef draw_iris_teal():\n    sketch.set_stroke(\"#5099a3\")\n    sketch.set_stroke_weight(1)\n\n    for i in range(1000):  \n        angle = math.radians(random.uniform(0, 360)) \n        length = random.uniform(70, x_radius)\n        x_end = x_center + length * math.cos(angle)  \n        y_end = y_center + length * math.sin(angle)  \n        sketch.draw_line(x_center, y_center, x_end, y_end)\n\ndef draw_iris_darkteal():\n    sketch.set_stroke(\"#335861\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(500):\n        angle = math.radians(i * (360 / 500)) \n        outer_length = x_radius - random.uniform(40, 80)\n        inner_length = x_radius - random.uniform(40, 80)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef draw_iris_lightteal():\n    sketch.set_stroke(\"#8eb7d7\")\n    sketch.set_stroke_weight(1)\n    outer_length = x_radius - 125\n    \n    for i in range(360):\n        angle = math.radians(i * (360 / 360))\n        inner_length = x_radius - random.uniform(70, 90)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n        \ndef outer_to_inner():\n    sketch.set_stroke(\"#125359\")\n    sketch.set_stroke_weight(1)\n    outer_length = x_radius \n\n    for i in range(1000):\n        angle = math.radians(i * (360 / 1000)) \n        inner_length = random.uniform(130, 140)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef white_ring():\n    sketch.set_stroke(\"#ffffff\")\n    sketch.set_stroke_weight(1)\n    \n    for i in range(200):\n        angle = math.radians(i * (360 / 200)) \n        outer_length = x_radius - random.uniform(30, 40)\n        inner_length = x_radius - random.uniform(30, 40)\n\n        x_outer = x_center + outer_length * math.cos(angle)\n        y_outer = y_center + outer_length * math.sin(angle)\n        x_inner = x_center + inner_length * math.cos(angle)\n        y_inner = y_center + inner_length * math.sin(angle)\n        sketch.draw_line(x_outer, y_outer, x_inner, y_inner)\n\ndef draw_shine():\n    sketch.set_fill(\"#ffffff\") \n    shine_x = x_center - 90  \n    shine_y = y_center - 40  \n    shine_width = 30  \n    shine_height = 15 \n    sketch.draw_ellipse(shine_x, shine_y, shine_width, shine_height)\n\nouter_ring()\ndraw_iris_teal()\ndraw_iris_darkteal()\ndraw_iris_lightteal()\nouter_to_inner()\nwhite_ring()\ndraw_pupil_fuzz()\ndraw_pupil()\ndraw_shine()\n\nsketch.show()\n"}